server:
  port: 5006

kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:9000
  topic-name: stock-topic
  topic-names-to-create:
    - stock-topic

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.LongDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  consumer-group-id: stock-topic-consumer
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150

retry-config:
  initial-interval-ms: 1000
  max-interval-ms: 30000
  multiplier: 2.0
  maxAttempts: 20
  sleep-time-ms: 2000

microservice-config:
  base-url: ${GATEWAY_SERVER_URL:http://localhost:8080}

stockapp-web-client:
  enabled: true

spring:
  security:
    oauth2:
      client:
        registration:
          stockapp:
            provider: keycloak
            authorization-grant-type: client_credentials
            client-id: stockapp-full-control-api
            client-secret: cnthWPaGN31are0vL9hXpjgtB0k5TDTM
            scope: openid
        provider:
          keycloak:
            token-uri: ${KEYCLOAK_SERVER_URL:http://localhost:7000}/realms/stockapp/protocol/openid-connect/token

logging:
  config: "${CONFIG_SERVER_URL:http://localhost:8088}/default/default/default/logback-spring.xml"
  logstash-url: ${LOGSTASH_SERVER_URL:localhost:5044}
