/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package org.finance.messagequeue.kafka.model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StockQuoteAvroModel extends org.apache.avro.specific.SpecificRecordBase implements
    org.apache.avro.specific.SpecificRecord {

  private static final long serialVersionUID = 3121927762618112509L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
      "{\"type\":\"record\",\"name\":\"StockQuoteAvroModel\",\"namespace\":\"org.finance.messagequeue.kafka.model.avro\",\"fields\":[{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"exchange\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"low\",\"type\":\"double\"},{\"name\":\"high\",\"type\":\"double\"},{\"name\":\"lastUpdated\",\"type\":[\"long\"],\"logicalType\":[\"timestamp-millis\"]}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockQuoteAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockQuoteAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   *
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockQuoteAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   *
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockQuoteAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified
   * {@link SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockQuoteAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockQuoteAvroModel to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockQuoteAvroModel from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockQuoteAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of
   *                             this class
   */
  public static StockQuoteAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String symbol;
  private java.lang.String exchange;
  private java.lang.String currency;
  private double low;
  private double high;
  private java.lang.Object lastUpdated;

  /**
   * Default constructor.  Note that this does not initialize fields to their default values from
   * the schema.  If that is desired then one should use <code>newBuilder()</code>.
   */
  public StockQuoteAvroModel() {
  }

  /**
   * All-args constructor.
   *
   * @param symbol      The new value for symbol
   * @param exchange    The new value for exchange
   * @param currency    The new value for currency
   * @param low         The new value for low
   * @param high        The new value for high
   * @param lastUpdated The new value for lastUpdated
   */
  public StockQuoteAvroModel(java.lang.String symbol, java.lang.String exchange,
      java.lang.String currency, java.lang.Double low, java.lang.Double high,
      java.lang.Object lastUpdated) {
    this.symbol = symbol;
    this.exchange = exchange;
    this.currency = currency;
    this.low = low;
    this.high = high;
    this.lastUpdated = lastUpdated;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  @Override
  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return symbol;
      case 1:
        return exchange;
      case 2:
        return currency;
      case 3:
        return low;
      case 4:
        return high;
      case 5:
        return lastUpdated;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        symbol = value$ != null ? value$.toString() : null;
        break;
      case 1:
        exchange = value$ != null ? value$.toString() : null;
        break;
      case 2:
        currency = value$ != null ? value$.toString() : null;
        break;
      case 3:
        low = (java.lang.Double) value$;
        break;
      case 4:
        high = (java.lang.Double) value$;
        break;
      case 5:
        lastUpdated = value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'symbol' field.
   *
   * @return The value of the 'symbol' field.
   */
  public java.lang.String getSymbol() {
    return symbol;
  }


  /**
   * Sets the value of the 'symbol' field.
   *
   * @param value the value to set.
   */
  public void setSymbol(java.lang.String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'exchange' field.
   *
   * @return The value of the 'exchange' field.
   */
  public java.lang.String getExchange() {
    return exchange;
  }


  /**
   * Sets the value of the 'exchange' field.
   *
   * @param value the value to set.
   */
  public void setExchange(java.lang.String value) {
    this.exchange = value;
  }

  /**
   * Gets the value of the 'currency' field.
   *
   * @return The value of the 'currency' field.
   */
  public java.lang.String getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   *
   * @param value the value to set.
   */
  public void setCurrency(java.lang.String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'low' field.
   *
   * @return The value of the 'low' field.
   */
  public double getLow() {
    return low;
  }


  /**
   * Sets the value of the 'low' field.
   *
   * @param value the value to set.
   */
  public void setLow(double value) {
    this.low = value;
  }

  /**
   * Gets the value of the 'high' field.
   *
   * @return The value of the 'high' field.
   */
  public double getHigh() {
    return high;
  }


  /**
   * Sets the value of the 'high' field.
   *
   * @param value the value to set.
   */
  public void setHigh(double value) {
    this.high = value;
  }

  /**
   * Gets the value of the 'lastUpdated' field.
   *
   * @return The value of the 'lastUpdated' field.
   */
  public java.lang.Object getLastUpdated() {
    return lastUpdated;
  }


  /**
   * Sets the value of the 'lastUpdated' field.
   *
   * @param value the value to set.
   */
  public void setLastUpdated(java.lang.Object value) {
    this.lastUpdated = value;
  }

  /**
   * Creates a new StockQuoteAvroModel RecordBuilder.
   *
   * @return A new StockQuoteAvroModel RecordBuilder
   */
  public static org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder newBuilder() {
    return new org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder();
  }

  /**
   * Creates a new StockQuoteAvroModel RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new StockQuoteAvroModel RecordBuilder
   */
  public static org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder newBuilder(
      org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder other) {
    if (other == null) {
      return new org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder();
    } else {
      return new org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new StockQuoteAvroModel RecordBuilder by copying an existing StockQuoteAvroModel
   * instance.
   *
   * @param other The existing instance to copy.
   * @return A new StockQuoteAvroModel RecordBuilder
   */
  public static org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder newBuilder(
      org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel other) {
    if (other == null) {
      return new org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder();
    } else {
      return new org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockQuoteAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends
      org.apache.avro.specific.SpecificRecordBuilderBase<StockQuoteAvroModel>
      implements org.apache.avro.data.RecordBuilder<StockQuoteAvroModel> {

    private java.lang.String symbol;
    private java.lang.String exchange;
    private java.lang.String currency;
    private double low;
    private double high;
    private java.lang.Object lastUpdated;

    /**
     * Creates a new Builder
     */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.exchange)) {
        this.exchange = data().deepCopy(fields()[1].schema(), other.exchange);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.currency)) {
        this.currency = data().deepCopy(fields()[2].schema(), other.currency);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.low)) {
        this.low = data().deepCopy(fields()[3].schema(), other.low);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.high)) {
        this.high = data().deepCopy(fields()[4].schema(), other.high);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.lastUpdated)) {
        this.lastUpdated = data().deepCopy(fields()[5].schema(), other.lastUpdated);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing StockQuoteAvroModel instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.exchange)) {
        this.exchange = data().deepCopy(fields()[1].schema(), other.exchange);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currency)) {
        this.currency = data().deepCopy(fields()[2].schema(), other.currency);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.low)) {
        this.low = data().deepCopy(fields()[3].schema(), other.low);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.high)) {
        this.high = data().deepCopy(fields()[4].schema(), other.high);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lastUpdated)) {
        this.lastUpdated = data().deepCopy(fields()[5].schema(), other.lastUpdated);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Gets the value of the 'symbol' field.
     *
     * @return The value.
     */
    public java.lang.String getSymbol() {
      return symbol;
    }


    /**
     * Sets the value of the 'symbol' field.
     *
     * @param value The value of 'symbol'.
     * @return This builder.
     */
    public org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder setSymbol(
        java.lang.String value) {
      validate(fields()[0], value);
      this.symbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'symbol' field has been set.
     *
     * @return True if the 'symbol' field has been set, false otherwise.
     */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'symbol' field.
     *
     * @return This builder.
     */
    public org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'exchange' field.
     *
     * @return The value.
     */
    public java.lang.String getExchange() {
      return exchange;
    }


    /**
     * Sets the value of the 'exchange' field.
     *
     * @param value The value of 'exchange'.
     * @return This builder.
     */
    public org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder setExchange(
        java.lang.String value) {
      validate(fields()[1], value);
      this.exchange = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'exchange' field has been set.
     *
     * @return True if the 'exchange' field has been set, false otherwise.
     */
    public boolean hasExchange() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'exchange' field.
     *
     * @return This builder.
     */
    public org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder clearExchange() {
      exchange = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'currency' field.
     *
     * @return The value.
     */
    public java.lang.String getCurrency() {
      return currency;
    }


    /**
     * Sets the value of the 'currency' field.
     *
     * @param value The value of 'currency'.
     * @return This builder.
     */
    public org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder setCurrency(
        java.lang.String value) {
      validate(fields()[2], value);
      this.currency = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'currency' field has been set.
     *
     * @return True if the 'currency' field has been set, false otherwise.
     */
    public boolean hasCurrency() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'currency' field.
     *
     * @return This builder.
     */
    public org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'low' field.
     *
     * @return The value.
     */
    public double getLow() {
      return low;
    }


    /**
     * Sets the value of the 'low' field.
     *
     * @param value The value of 'low'.
     * @return This builder.
     */
    public org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder setLow(
        double value) {
      validate(fields()[3], value);
      this.low = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'low' field has been set.
     *
     * @return True if the 'low' field has been set, false otherwise.
     */
    public boolean hasLow() {
      return fieldSetFlags()[3];
    }


    /**
     * Clears the value of the 'low' field.
     *
     * @return This builder.
     */
    public org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder clearLow() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'high' field.
     *
     * @return The value.
     */
    public double getHigh() {
      return high;
    }


    /**
     * Sets the value of the 'high' field.
     *
     * @param value The value of 'high'.
     * @return This builder.
     */
    public org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder setHigh(
        double value) {
      validate(fields()[4], value);
      this.high = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'high' field has been set.
     *
     * @return True if the 'high' field has been set, false otherwise.
     */
    public boolean hasHigh() {
      return fieldSetFlags()[4];
    }


    /**
     * Clears the value of the 'high' field.
     *
     * @return This builder.
     */
    public org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder clearHigh() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'lastUpdated' field.
     *
     * @return The value.
     */
    public java.lang.Object getLastUpdated() {
      return lastUpdated;
    }


    /**
     * Sets the value of the 'lastUpdated' field.
     *
     * @param value The value of 'lastUpdated'.
     * @return This builder.
     */
    public org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder setLastUpdated(
        java.lang.Object value) {
      validate(fields()[5], value);
      this.lastUpdated = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'lastUpdated' field has been set.
     *
     * @return True if the 'lastUpdated' field has been set, false otherwise.
     */
    public boolean hasLastUpdated() {
      return fieldSetFlags()[5];
    }


    /**
     * Clears the value of the 'lastUpdated' field.
     *
     * @return This builder.
     */
    public org.finance.messagequeue.kafka.model.avro.StockQuoteAvroModel.Builder clearLastUpdated() {
      lastUpdated = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockQuoteAvroModel build() {
      try {
        StockQuoteAvroModel record = new StockQuoteAvroModel();
        record.symbol =
            fieldSetFlags()[0] ? this.symbol : (java.lang.String) defaultValue(fields()[0]);
        record.exchange =
            fieldSetFlags()[1] ? this.exchange : (java.lang.String) defaultValue(fields()[1]);
        record.currency =
            fieldSetFlags()[2] ? this.currency : (java.lang.String) defaultValue(fields()[2]);
        record.low = fieldSetFlags()[3] ? this.low : (java.lang.Double) defaultValue(fields()[3]);
        record.high = fieldSetFlags()[4] ? this.high : (java.lang.Double) defaultValue(fields()[4]);
        record.lastUpdated = fieldSetFlags()[5] ? this.lastUpdated : defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockQuoteAvroModel>
      WRITER$ = (org.apache.avro.io.DatumWriter<StockQuoteAvroModel>) MODEL$.createDatumWriter(
      SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out)
      throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockQuoteAvroModel>
      READER$ = (org.apache.avro.io.DatumReader<StockQuoteAvroModel>) MODEL$.createDatumReader(
      SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in)
      throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










